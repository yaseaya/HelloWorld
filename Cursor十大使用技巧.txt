1
00:00:00,000 --> 00:00:02,600
我已经使用科色超过80个小时

2
00:00:02,600 --> 00:00:03,840
做了5个插件

3
00:00:03,840 --> 00:00:05,400
上了3个网站

4
00:00:05,400 --> 00:00:09,160
以及一大堆本地帮我自动化的工具

5
00:00:09,160 --> 00:00:12,120
这是我这段时间积累下来的

6
00:00:12,120 --> 00:00:15,120
最重要的使用科色的10个技巧

7
00:00:15,120 --> 00:00:16,400
现在就分享给你

8
00:00:16,400 --> 00:00:18,200
尤其是最后一个技巧

9
00:00:18,200 --> 00:00:20,920
不只能让你提升使用科色的体验

10
00:00:20,920 --> 00:00:23,240
还能帮你省下一大笔钱

11
00:00:23,240 --> 00:00:24,800
就是一定要看到最后

12
00:00:24,800 --> 00:00:27,440
以及别忘了点赞和收藏

13
00:00:29,440 --> 00:00:30,440
技巧一

14
00:00:30,440 --> 00:00:33,040
总是在一个空的文件夹中

15
00:00:33,040 --> 00:00:34,160
开启一个新项目

16
00:00:34,160 --> 00:00:36,920
因为科色它默认开启文件夹

17
00:00:36,920 --> 00:00:39,160
是你项目的根目录

18
00:00:39,160 --> 00:00:43,360
如果你开启的那个项目的实际文件

19
00:00:43,360 --> 00:00:46,800
是在你开启的这个文件夹的

20
00:00:46,800 --> 00:00:48,400
紫文件里的话

21
00:00:48,400 --> 00:00:52,240
会经常发生科色创建的文件错乱

22
00:00:52,240 --> 00:00:55,840
导致你项目没有办法正常运行的这个情况

23
00:00:55,840 --> 00:00:58,440
而其中有一个非常关键的一点

24
00:00:58,440 --> 00:01:01,160
就是比方说你进入了一个空文件

25
00:01:01,160 --> 00:01:05,640
然后你通过类似于NPM Create Next App

26
00:01:05,640 --> 00:01:09,920
这样的方式去创建一个新的项目的根目录的时候

27
00:01:09,920 --> 00:01:16,360
它有可能会创建一个新的文件去存放这个项目

28
00:01:16,360 --> 00:01:17,440
这种情况下

29
00:01:17,440 --> 00:01:20,360
你只能从科色先退出

30
00:01:20,360 --> 00:01:21,960
然后再重新进入

31
00:01:21,960 --> 00:01:24,240
技巧二

32
00:01:24,240 --> 00:01:25,840
表述需求的时候

33
00:01:25,840 --> 00:01:27,640
你应该尽量明确

34
00:01:27,640 --> 00:01:29,880
但是要稍微谨慎一些

35
00:01:29,880 --> 00:01:32,480
科色会完全按照你的需求来

36
00:01:32,480 --> 00:01:36,480
你不必要的信息会增加实现的难度

37
00:01:36,480 --> 00:01:39,680
比方说我之前要去完成一个

38
00:01:39,680 --> 00:01:44,040
对电脑本地的文件进行操作的一个功能

39
00:01:44,040 --> 00:01:48,200
但因为我在需求里提到了上传

40
00:01:48,200 --> 00:01:52,160
然后这就增加了科色它实现的复杂度

41
00:01:52,160 --> 00:01:54,840
它会真的考虑上传的这个问题

42
00:01:54,840 --> 00:01:58,200
所以它会去做很多后端的这种设计

43
00:01:58,200 --> 00:02:02,000
它导致了后面做项目更费时8个多

44
00:02:02,000 --> 00:02:05,080
而如果你写的需求过度简化的话

45
00:02:05,080 --> 00:02:08,240
这会留给科色自由发挥的空间

46
00:02:08,240 --> 00:02:10,080
也会容易导致它失控

47
00:02:10,080 --> 00:02:13,440
技巧三

48
00:02:13,440 --> 00:02:19,440
让科色从项目一开始就去给你写RedMe文档

49
00:02:19,440 --> 00:02:21,800
让它记录清楚产品功能

50
00:02:21,800 --> 00:02:23,600
实现技术战等等

51
00:02:23,600 --> 00:02:26,880
并且让它在完成关键节点之后

52
00:02:26,880 --> 00:02:29,800
对RedMe文档进行及时的更新

53
00:02:29,800 --> 00:02:34,080
这样你对于项目的状态有更清晰的认知

54
00:02:34,080 --> 00:02:37,480
而你第二天想要再回到这个项目时

55
00:02:37,480 --> 00:02:41,600
你也可以让科色重新读这个RedMe文档

56
00:02:41,600 --> 00:02:45,080
去形成对你的项目要实现的目标

57
00:02:45,080 --> 00:02:47,560
以及实现状态的这种理解

58
00:02:47,560 --> 00:02:51,600
你可以把它理解为一个项目系统的长期记忆

59
00:02:51,600 --> 00:02:52,600
技巧四

60
00:02:52,600 --> 00:02:56,600
让科色写代码时写清楚各个代码快的注释

61
00:02:56,600 --> 00:03:00,200
帮助你自己学习和理解实现的逻辑

62
00:03:00,200 --> 00:03:03,000
这样对于你快速学习编程

63
00:03:03,000 --> 00:03:06,200
在面对复杂问题时发现问题

64
00:03:06,200 --> 00:03:08,000
都是有相当好的帮助

65
00:03:08,000 --> 00:03:13,000
技巧五

66
00:03:13,000 --> 00:03:15,000
用Git做版本管理

67
00:03:15,000 --> 00:03:17,400
在成功节点你要做好提交

68
00:03:17,400 --> 00:03:20,000
并且最好想要的就是提交

69
00:03:20,000 --> 00:03:23,200
并且最好写好说明的内容

70
00:03:23,200 --> 00:03:25,800
给自己后续复原的机会

71
00:03:25,800 --> 00:03:29,600
因为后面你很可能在做新的功能或者改Bug时

72
00:03:29,600 --> 00:03:33,200
去把整个项目给毁掉

73
00:03:33,200 --> 00:03:36,600
去写出一堆的史山最终不知道如何下手

74
00:03:36,600 --> 00:03:38,200
你到时候就会后悔

75
00:03:38,200 --> 00:03:41,000
如果我早点的那个版本保存下来

76
00:03:41,000 --> 00:03:43,000
我能回到那个版本就好了

77
00:03:43,000 --> 00:03:45,800
技巧六

78
00:03:45,800 --> 00:03:49,800
使用Command+I这个功能去调出Composer

79
00:03:49,800 --> 00:03:51,200
去开始一个项目

80
00:03:51,200 --> 00:03:53,600
如果你使用的是PC电脑的话

81
00:03:53,600 --> 00:03:55,000
那应该是Ctrl+I

82
00:03:55,000 --> 00:04:00,600
在项目的测试和改Bug的阶段的话

83
00:04:00,600 --> 00:04:03,400
你尽量去选择Save All

84
00:04:03,400 --> 00:04:05,200
就是使用Composer的时候

85
00:04:05,200 --> 00:04:06,400
你有几个选项

86
00:04:06,400 --> 00:04:09,000
就是Save All以及Accept All

87
00:04:09,000 --> 00:04:11,200
当你Save All之后

88
00:04:11,200 --> 00:04:14,000
其实这个项目的文件

89
00:04:14,000 --> 00:04:16,800
它的代码就已经处于运行

90
00:04:16,800 --> 00:04:19,000
并且你可以测试的状态了

91
00:04:19,000 --> 00:04:20,800
然后在这种情况下

92
00:04:20,800 --> 00:04:22,600
你去进行测试

93
00:04:22,600 --> 00:04:26,600
你能给自己留下更多处理的问题的空间

94
00:04:26,600 --> 00:04:30,000
你确定新的更改没有问题的时候

95
00:04:30,000 --> 00:04:31,600
你再去Accept

96
00:04:31,600 --> 00:04:34,200
而如果你发现Composer一直在改

97
00:04:34,200 --> 00:04:35,000
但是改不通

98
00:04:35,000 --> 00:04:36,600
甚至出现更多错误的话

99
00:04:36,600 --> 00:04:39,600
你这时候就可以选择Reject All

100
00:04:39,600 --> 00:04:45,600
这个时候Composer就会把一段时间内的这个代码全部取消更改

101
00:04:45,600 --> 00:04:46,600
技巧七

102
00:04:46,600 --> 00:04:49,000
使用Composer还有Trash功能时

103
00:04:49,000 --> 00:04:51,200
尽量多Add Coder Base

104
00:04:51,200 --> 00:04:52,400
否则的话

105
00:04:52,400 --> 00:04:55,200
客户常常会有这种幻觉

106
00:04:55,200 --> 00:04:57,200
他不知道项目内容究竟是什么

107
00:04:57,200 --> 00:05:01,800
技巧八

108
00:05:01,800 --> 00:05:05,400
常用的文档链接可以加入到Docs中

109
00:05:05,400 --> 00:05:09,400
比如你习惯使用的AI API的调用文档

110
00:05:09,400 --> 00:05:11,200
这样你会更容易使用

111
00:05:11,200 --> 00:05:15,800
随时可以Add

112
00:05:15,800 --> 00:05:18,000
Composer会读取其中的信息

113
00:05:18,000 --> 00:05:20,600
而不需要你自己去做过多的描述

114
00:05:20,600 --> 00:05:25,000
这是一个非常提升效率的一个小动作

115
00:05:25,000 --> 00:05:27,800
技巧九

116
00:05:27,800 --> 00:05:31,200
上用Setting里的Rules for AI

117
00:05:31,200 --> 00:05:34,800
写在其中的提示词相当于System Prompt

118
00:05:34,800 --> 00:05:38,400
可以用来要求Composer的回答节奏

119
00:05:38,400 --> 00:05:43,600
风格在其中表明清楚你的编程经验和偏好语言

120
00:05:43,600 --> 00:05:46,000
会对项目有很大的帮助

121
00:05:46,000 --> 00:05:49,400
技巧十

122
00:05:49,400 --> 00:05:54,400
注册账号后免费期限或者免费次数用完的时候

123
00:05:54,400 --> 00:05:58,600
因为你只有两个星期和500条的那个Print的使用次数

124
00:05:58,600 --> 00:06:02,000
在这个情况下你可以去Delete账户

125
00:06:02,000 --> 00:06:04,800
然后再使用原邮箱去进行登录

126
00:06:04,800 --> 00:06:07,600
这样你又可以在上一个星期的时间

127
00:06:07,600 --> 00:06:13,000
这样你又能获得一个14天500条Cloud 3.5

128
00:06:13,000 --> 00:06:15,000
使用全线的这么一条命

129
00:06:15,000 --> 00:06:23,000
OK 今天所有的技巧都介绍到这

130
00:06:23,000 --> 00:06:25,600
然后里面提到的一些描述

131
00:06:25,600 --> 00:06:28,600
你可能需要更清楚这个文档信息

132
00:06:28,600 --> 00:06:30,800
才能往下去做

133
00:06:30,800 --> 00:06:33,200
然后如果你需要这样的文档的话

134
00:06:33,200 --> 00:06:37,200
你可以给这条视频点赞评论投币

135
00:06:37,200 --> 00:06:40,600
然后给我发送私信或者回复Cursor

136
00:06:40,600 --> 00:06:42,800
我就会给你回复对应的

137
00:06:42,800 --> 00:06:45,200
关于这个视频的所有技巧的文档

